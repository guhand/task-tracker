// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  role      String
  isActive  Boolean  @default(true)
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  Users     User[]
}

model User {
  id               Int            @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String         @unique
  mobile           String         @unique
  roleId           Int
  Role             Role           @relation(fields: [roleId], references: [id])
  token            String?
  creatorId        Int?
  UserCreator      User?          @relation("createdUser", fields: [creatorId], references: [id])
  modifierId       Int?
  UserModifier     User?          @relation("modifiedUser", fields: [modifierId], references: [id])
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  CreatedUsers     User[]         @relation("createdUser")
  ModifiedUsers    User[]         @relation("modifiedUser")
  UserPasswords    UserPassword[]
  CreatedProjects  Project[]      @relation("createdProject")
  ModifiedProjects Project[]      @relation("modifiedProject")
  CreatedTasks     Task[]         @relation("createdTask")
  ModifiedTasks    Task[]         @relation("modifiedTask")
  Tasks            TaskAssignee[]
}

model UserPassword {
  id        Int      @id @default(autoincrement())
  password  String
  otp       String?
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  creatorId       Int
  ProjectCreator  User     @relation("createdProject", fields: [creatorId], references: [id])
  modifierId      Int?
  ProjectModifier User?    @relation("modifiedProject", fields: [modifierId], references: [id])
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Tasks           Task[]
}

model Task {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  projectId     Int
  Project       Project        @relation(fields: [projectId], references: [id])
  typeId        Int
  TaskType      TaskType       @relation(fields: [typeId], references: [id])
  statusId      Int
  TaskStatus    TaskStatus     @relation(fields: [statusId], references: [id])
  creatorId     Int
  TaskCreator   User           @relation("createdTask", fields: [creatorId], references: [id])
  modifierId    Int?
  TaskModifier  User?          @relation("modifiedTask", fields: [modifierId], references: [id])
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updateAt      DateTime       @updatedAt
  TaskImages    TaskImage[]
  TaskAssignees TaskAssignee[]
}

model TaskType {
  id        Int      @id @default(autoincrement())
  type      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  Tasks     Task[]
}

model TaskStatus {
  id        Int      @id @default(autoincrement())
  status    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  Tasks     Task[]
}

model TaskAssignee {
  id         Int      @id @default(autoincrement())
  taskId     Int
  Task       Task     @relation(fields: [taskId], references: [id])
  userId     Int
  TaskToUser User     @relation(fields: [userId], references: [id])
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TaskImage {
  id        Int      @id @default(autoincrement())
  image     String
  taskId    Int
  Task      Task     @relation(fields: [taskId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
